#!/bin/bash
#la ligne 3 à 6 permettent de dire où prendre les infos et où les mettre
echo "indiquer le dossier d'urls : ";
DOSSIERURLS=../urls/
#read DOSSIERURLS ;
echo "indiquer le dossier de reception du tableau : ";
fichier_tableau=../tableaux/tab.html
#les lignes de 8 et 9, pour renommer les variables
echo "le dossier d'URLs : $DOSSIERURLS" ;
echo "le fichier contenant le tableau : $fichier_tableau" ;
#compteur de tableau
cpttableau=1 ;
#début du script pour le html
echo "<html><head></head><body>" > $fichier_tableau ;
#pour chacun des fichiers, dans le dossier urls, fais....
for fichier in `ls $DOSSIERURLS`
{
	#création du compteur de lignes = 1
	compteur=1 ;
	#création de l'architecture du tableau, qui va etre généré dans fichier_tableau
	echo "<table align=\"center\" border =\"1\">" >> $fichier_tableau ;
	#architecture tableau plus nom de la cellule "tableau
	echo "<tr><td colspan=\"5\">tableau $cpttableau</td></tr>" >> $fichier_tableau ;
	#pour chaque lignes dans chaque fichiers trouvés dans dossier urls fais....
	for line in `cat $DOSSIERURLS/$fichier`
	{
		#wget ouvre la page web, l'aspire et l'enregistre dans le fichier pages-aspiréées + numéroter colonne et ligne
		wget $line -O ../pages-aspirees/$cpttableau-$compteur.html ;
		#si wget fonctionne correctement... $? = 0 -> ça fonctionne $?=127 -> problème
		if [ $? == 0 ]
			#stocker encodage dans une variable nommée encodage et ne sélectionne (avec cut) que l'encodage du fichier html
			then 
			encodage=$(file -i ../pages-aspirees/$cpttableau-$compteur.html | cut -f2 -d=);
			#execute l'instruction qui est dans la variable encodage
			echo $encodage ;
			#si l'encodage est en utf-8 alors...
			if [ $encodage == "utf-8" ]
				#lynx (pour lire la page internet) dump (mettre le contenu de la page html dans un fichier sur notre ordi
				#nolist enlève les hyper liens et assume_charset ne sélectionne que ce qui est dans l'encodage de notre choix
				# chevron demande de mettre tout ça dans un fichier (principe du dump)  situé dans le répertoire "dump-text" et créée un fichier txt pour chaque ligne
				then 
				lynx -dump -nolist -assume_charset =$encodage $line > ../dump-text/$cpttableau-$compteur.txt ;
				# 1. numéro de ligne 2.numéro url 3.lien vers la pa 4.type d'encodage
				echo "<tr><td>$compteur</td><td><a href=\"$line\">lien $compteur</a></td><td><a href=\"../pages-aspirees/$cpttableau-$compteur.html\"> PA $cpttableau-$compteur</a></td><td>$encodage</td><td><a href=\"../dump-text/$cpttableau-$compteur.txt\">DUMP $cpttableau-$compteur</a></td></tr>" >> $fichier_tableau ;
				
			#si cela ne correspond pas au "if" (cad l'encodage n'est pas en utf-8) alors.....
			else
				# il fait la même chose que tout à l'heure
				lynx -dump -nolist -assume_charset=$encodage $line > ../dump-text/$cpttableau-$compteur.txt ;
				# mais change l'encodage, et génère un autre fichier txt version utf-8
				iconv -f $encodage -t utf-8 ../dump-text/$cpttableau-$compteur.txt > ../dump-text/$cpttableau-$compteur_UTF8.txt
				echo "<tr><td>$compteur</td><td><a href=\"$line\">lien $compteur</a></td><td><a href=\"../pages-aspirees/$cpttableau-$compteur.html\"> PA $cpttableau-$compteur</a></td><td>$encodage </td><td><a href=\"../dump-text/$cpttableau-$compteur_UTF8.txt\">DUMP $cpttableau-$compteur</a></td></tr>" >> $fichier_tableau ;
			fi
		#si wget ne fonctionne pa 
		else
			# mets des tirets partout
			echo "<tr><td>$compteur</td><td><a href=\"$line\">lien $compteur</a></td><td>--</td><td>--</td><td>--</td></tr>" >> $fichier_tableau ; 

		#fi = fin d'un if/else
		fi ;

		# compte quand-même les lignes même s'il n'y a rien
		let "compteur=compteur+1" ;
	}
	echo "</table>" >> $fichier_tableau ;
	let "cpttableau=cpttableau+1";
}
echo "</body></html>" >> $fichier_tableau ;




